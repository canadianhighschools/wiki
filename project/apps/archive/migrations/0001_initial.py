# Generated by Django 4.2.6 on 2023-10-24 17:10

import apps.archive.validators
import apps.core.deconstructible
import apps.core.models.abstract
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
    ]

    operations = [
        migrations.CreateModel(
            name='ImageContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flags', models.SmallIntegerField(auto_created=True, default=0)),
                ('file', models.ImageField(upload_to=apps.core.deconstructible.RenameFileToUUID(), verbose_name='file')),
            ],
            options={
                'verbose_name': 'Image Content',
                'verbose_name_plural': 'Image Contents',
                'db_table': 'ImageContent',
            },
        ),
        migrations.CreateModel(
            name='PDFContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flags', models.SmallIntegerField(auto_created=True, default=0)),
                ('file', models.FileField(storage='archive', upload_to=apps.core.deconstructible.RenameFileToUUID(), validators=[apps.archive.validators.validate_pdf_file_extension], verbose_name='file')),
            ],
            options={
                'verbose_name': 'PDF Content',
                'verbose_name_plural': 'PDF Contents',
                'db_table': 'PDFContent',
            },
        ),
        migrations.CreateModel(
            name='ArchiveItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_modified', models.DateTimeField(auto_created=True, auto_now=True, verbose_name='Last Modified')),
                ('date_created', models.DateTimeField(auto_created=True, auto_now_add=True, verbose_name='Creation Date')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('description', models.CharField(blank=True, default='', max_length=32767, verbose_name='Description')),
                ('img', models.OneToOneField(auto_created=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='snapshot', to='archive.imagecontent', verbose_name='Snapshot')),
                ('pdf', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='item_pdf', to='archive.pdfcontent', verbose_name='PDF')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Archive Item',
                'verbose_name_plural': 'Archive Items',
                'db_table': 'ArchiveItem',
            },
            bases=(models.Model, apps.core.models.abstract.ApproverMixin),
        ),
        migrations.CreateModel(
            name='ArchiveDraft',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_modified', models.DateTimeField(auto_created=True, auto_now=True, verbose_name='Last Modified')),
                ('date_created', models.DateTimeField(auto_created=True, auto_now_add=True, verbose_name='Creation Date')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('description', models.CharField(blank=True, default='', max_length=32767, verbose_name='Description')),
                ('pdf', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='draft_pdf', to='archive.pdfcontent', verbose_name='PDF')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Archive Draft',
                'verbose_name_plural': 'Archive Drafts',
                'db_table': 'ArchiveDraft',
            },
            bases=(models.Model, apps.core.models.abstract.ContributionMixin),
        ),
    ]
